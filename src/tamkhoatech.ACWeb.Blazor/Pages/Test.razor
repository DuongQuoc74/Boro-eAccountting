@* Lưu ý: không được xóa *@
@* code phân trang đang đợi có time để update *@
@page "/phantrang"
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Lists
@inject IJSRuntime JSRunTime

<link rel="stylesheet" href="/Css/them-sua-phieu.css">
@if (hasRefresh)
{
    <div class="main-content">
    <div class="col-lg-12 control-section sb-property-border">
        @{
            var listData = ListData.Skip(SkipValue).Take(TakeValue).ToList();
            <SfListView @ref="@List" DataSource="@listData" TValue="DataModel" HeaderTitle="Contacts" ShowHeader="true">
                <ListViewFieldSettings TValue="DataModel" Id="Id" Text="Name"></ListViewFieldSettings>
            </SfListView>
        }
        <SfPager @ref="@Page" Created="PageCreated" PageSizes="pagesizes" PageSize="TakeValue" NumericItemsCount=5 TotalItemsCount=ListData.Count ItemClick="PagerItemClick" PageSizeChanged="PageSizeChanged">
        </SfPager>
    </div>
    </div>
}
@code {
    SfPager Page;
    public List<int> pagesizes = new List<int> { 5, 10, 15, 20, 25, 50, 100};
    public SfListView<DataModel> List { get; set; }
    public int SkipValue = 0;
    public int TakeValue = 10;
    public bool hasRefresh = false;
    List<DataModel> ListData = new List<DataModel>();
    protected override async Task OnInitializedAsync()
    {
        if(!hasRefresh)
        {
            ListData = Enumerable.Range(1, 1000000).Select(x => new DataModel()
                {
                    Id = 1000 + x,
                    Name = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
                }).ToList();

            hasRefresh = true;
        }

       
    }
    public async Task PageCreated()
    {
        await JSRunTime.InvokeVoidAsync("renamePageSize", "Cỡ trang");
    }
    public void PagerItemClick(PagerItemClickEventArgs args)
    {
        SkipValue = (args.CurrentPage * Page.PageSize) - Page.PageSize;
        TakeValue = Page.PageSize;
    }
    public async Task PageSizeChanged(PageSizeChangedArgs args)
    {
        SkipValue = (args.CurrentPage * Page.PageSize) - Page.PageSize;
        TakeValue = Page.PageSize;
    }
    public class DataModel
    {
        public string Name { get; set; }
        public int Id { get; set; }
    }
}